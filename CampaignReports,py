#!/usr/bin/env python3
"""
This script generates a verbose PDF report titled "Zoho Campaign Performance" focused on email marketing KPIs.
It includes:
  - A summary table of key KPIs rendered as a styled table.
  - A correlation heatmap and distribution histograms for key rate metrics.
  - AI-generated textual slides with structured insights (Overview, AI Insights, Recommendations, Industry Standards).
  - A combined slide for Key Definitions and Additional Information.
  - An overall conclusions slide.
  
All slides use a uniform letter-sized landscape (11″×8.5″) and feature consistent styling with UCSB Blue fonts,
UCSB Gold and PaCE Links accents, and the logo displayed on every slide.
"""

import os
import argparse
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.backends.backend_pdf import PdfPages
from dotenv import load_dotenv
import dataframe_image as dfi

try:
    from openai import OpenAI
except ImportError:
    OpenAI = None
    print("Please install the OpenAI library with `pip install openai`")

from analysis import create_summary_table, compute_rate_columns, process_markdown
from visualization import (create_definitions_additional_slide, create_summary_table_slide,
                           create_correlation_heatmap, create_distribution_histogram,
                           create_overall_conclusion)
from utils import add_slide_number, place_logo_on_figure, verbose_print

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
FIGSIZE = (11, 8.5)

def init_openai_client():
    if OpenAI is None or OPENAI_API_KEY is None:
        verbose_print("OpenAI client not configured. Comments will be skipped.")
        return None
    client = OpenAI(api_key=OPENAI_API_KEY)
    return client

def generate_title_slide(pdf):
    """
    Generates a redesigned title slide with attractive layout, proper spacing, and logo.
    """
    fig, ax = plt.subplots(figsize=FIGSIZE)
    ax.axis('off')
    fig.patch.set_facecolor('white')
    
    # Center title with margin from top
    ax.text(0.5, 0.65, "Zoho Campaign Performance", fontsize=36, fontweight='bold', ha='center', color="#003660")
    ax.text(0.5, 0.55, "A Data-Driven Look at Email Marketing Results", fontsize=24, ha='center', color="#1178b5")
    
    # Place logo at top left
    try:
        logo_path = os.path.join(os.getcwd(), "logo.png")
        logo_img = plt.imread(logo_path)
        ax.imshow(logo_img, extent=[0.05, 0.25, 0.80, 0.95], aspect='auto', zorder=10)
    except Exception as e:
        verbose_print(f"Error loading logo: {e}")
    
    add_slide_number(fig)
    pdf.savefig(fig, bbox_inches='tight')
    plt.close(fig)

def main():
    parser = argparse.ArgumentParser(
        description="Generate a Zoho Campaign Performance PDF report with AI insights."
    )
    parser.add_argument('--file', type=str, default="CampaignReports2025.csv",
                        help="Path to the CSV file (default: CampaignReports2025.csv)")
    parser.add_argument('--output', type=str, default="zoho_campaign_performance.pdf",
                        help="Output PDF file name (default: zoho_campaign_performance.pdf)")
    args = parser.parse_args()

    verbose_print("Initializing OpenAI client...")
    client = init_openai_client()

    verbose_print(f"Reading CSV file: {args.file}")
    try:
        df = pd.read_csv(args.file)
        verbose_print("CSV file loaded successfully.")
    except Exception as e:
        verbose_print(f"Error reading file {args.file}: {e}")
        return

    # Drop negligible columns if present
    cols_to_drop = ["Forwards", "Marked as spam"]
    dropped = []
    for col in cols_to_drop:
        if col in df.columns:
            df.drop(columns=[col], inplace=True)
            dropped.append(col)
    note = f"Dropped metrics: {', '.join(dropped)}." if dropped else "No negligible metrics were dropped."
    verbose_print(note)

    with PdfPages(args.output) as pdf:
        # Title Slide
        verbose_print("Generating title slide...")
        generate_title_slide(pdf)

        # Combined Definitions & Additional Information Slide
        verbose_print("Generating definitions and additional information slide...")
        create_definitions_additional_slide(pdf, note)

        # Summary Table Slide
        verbose_print("Generating summary table slide...")
        summary_df = create_summary_table(df)
        create_summary_table_slide(summary_df, pdf)

        # Compute rate columns
        df_rates = compute_rate_columns(df)

        # Correlation Heatmap Slide
        verbose_print("Generating correlation heatmap slide...")
        create_correlation_heatmap(df_rates, pdf, client)

        # Distribution Histograms for key metrics
        for metric in ["Delivery Rate", "Open Rate", "Click Rate", "Bounce Rate", "Unsubscribe Rate"]:
            verbose_print(f"Generating distribution histogram for {metric}...")
            create_distribution_histogram(df_rates, metric, pdf, client)

        # Overall Conclusions Slide
        verbose_print("Generating overall conclusions slide...")
        create_overall_conclusion(summary_df, pdf, client)

    verbose_print(f"PDF report successfully created: {args.output}")

if __name__ == "__main__":
    main()
